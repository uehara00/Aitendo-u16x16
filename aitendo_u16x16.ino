// 2018/01/21 aitendo_u16x16
// aitendo k-u16x16 / u16x16-spi / u16x16-4p
// dot matrix (32 x 16) demonstration 
// Copyright 2018 BotanicFields, Inc
#include <MsTimer2.h>
#include <SPI.h>

// define pins of Arduino
const int PinLT =  9;  // u16x16_p1: latch
//        PinCL = 13;  // u16x16_p2: clock
//        PinDT = 11;  // u16x16_p3: data
const int PinG  =  8;  // u16x16_p4: G
const int PinA  =  7;  // u16x16_p5: A
const int PinB  =  6;  // u16x16_p5: B
const int PinC  =  5;  // u16x16_p5: C
const int PinD  =  4;  // u16x16_p5: D

// LED matrix
// [ 0]0123456789abcdef [ 1]0123456789abcdef
// [ 2]0123456789abcdef [ 3]0123456789abcdef
//    ..
// [1e]0123456789abcdef [1f]0123456789abcdef
uint16_t Led[32];  // 16x32 LED matrix image buffer
int      Row;      // 0..15

// prototypes for default arguments
void demoPrint2(char s1[], char s2[], int c1 = 1, int c2 = 1, int d = 100);

void setup() {
  // pin assignment
  pinMode(SCK,   OUTPUT); digitalWrite(SCK,   LOW);  // Arduino_p13 to u16x16_p2, clock
  pinMode(MOSI,  OUTPUT); digitalWrite(MOSI,  LOW);  // Arduino_p11 to u16x16_p3, data
  pinMode(SS,    OUTPUT); digitalWrite(SS,    LOW);  // Arduino_p10 to NC
  pinMode(PinLT, OUTPUT); digitalWrite(PinLT, LOW);    
  pinMode(PinG,  OUTPUT); digitalWrite(PinG,  LOW); 
  pinMode(PinA,  OUTPUT); digitalWrite(PinA,  LOW); 
  pinMode(PinB,  OUTPUT); digitalWrite(PinB,  LOW); 
  pinMode(PinC,  OUTPUT); digitalWrite(PinC,  LOW); 
  pinMode(PinD,  OUTPUT); digitalWrite(PinD,  LOW); 
  // clear valiables
  LEDclear();
  Row = 0;
  // initialize timer interrupt
  MsTimer2::set(1, LEDdynamic);  // 1ms period .. (refresh 60Hz * 16row/frame = 960Hz) 
  MsTimer2::start();
}

void loop() {
  demoTest();    delay(1000);
  demoRandom();  delay(1000);
  demoBall();    delay(1000);
  demoLine1();   delay(1000);
  demoLine2();   delay(1000);
  demoCircle1(); delay(1000);
  demoCircle2(); delay(1000);
  demoCircle3(); delay(1000);
  char s1[] = "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_0123456789:;<=>?";
  char s2[] = "`abcdefghijklmnopqrstuvwxyz{|}~ !\"#$%&'()*+,-.\/|";
  demoPrint2(s1, s2);  delay(1000);
  char s3[] = "A quick brown fox jumped over the lazy dog.";
  char s4[] = "An old saying tells us that if you want something done well, you should do it yourself.";
  demoPrint2(s3, s4, 1, 1, 50);  delay(1000);
  demoPrint2(s3, s4, 0, 1, 10);  delay(1000);
  demoTimer();  delay(1000);
}

// dynamic display control called by MsTimer2
void LEDdynamic() {
  // shift column data into 74HC595 
  SPI.beginTransaction(SPISettings(14000000, LSBFIRST, SPI_MODE0));
  SPI.transfer16(~Led[Row * 2 + 1]);
  SPI.transfer16(~Led[Row * 2    ]);
  SPI.endTransaction();
  // LED off
  digitalWrite(PinG, HIGH);
  // latch to 74HC595
  digitalWrite(PinLT, HIGH);
  digitalWrite(PinLT, LOW);
  // set row select to 74HC138
  if((Row & 0x01) == 0) digitalWrite(PinA, LOW); else digitalWrite(PinA, HIGH); 
  if((Row & 0x02) == 0) digitalWrite(PinB, LOW); else digitalWrite(PinB, HIGH);
  if((Row & 0x04) == 0) digitalWrite(PinC, LOW); else digitalWrite(PinC, HIGH);
  if((Row & 0x08) == 0) digitalWrite(PinD, LOW); else digitalWrite(PinD, HIGH);
  // LED on
  digitalWrite(PinG, LOW);
  // next Row
  if(++Row >= 16) Row = 0;
}

// basic functions of LED graphics
void LEDclear() {
  for(int i = 0; i < 32; i++) Led[i] = 0;
}

void LEDplot(int x, int y, int c) {
  if((x >= 0) && (x < 32) && (y >= 0) && (y < 16)) {
    int i = ((y & 0x0f) << 1) | ((x & 0x10) >> 4);
    uint16_t m = 0x8000 >> (x & 0x0f);
    switch(c) {
      case 0: Led[i] &= ~m; break;
      case 1: Led[i] |=  m; break;
      case 2: Led[i] ^=  m; break;
      default: {}
    }
  }
}

// Bresenham's line algorithm
void LEDline(int x1, int y1, int x2, int y2, int c) {
  if((x1 == x2) && (y1 == y2)) {
    LEDplot(x1, y1, c);
  }
  else {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    if(dx >= dy) {
      // x-based
      if(x2 < x1) {
        swapInt(&x2, &x1);
        swapInt(&y2, &y1);
      }
      int s = (y2 > y1)? 1: -1;
      int d = 0;
      int y = y1;
      for(int x = x1; x <= x2; x++) {
        LEDplot(x, y, c);
        d += dy * 2;
        if(d >= dx) {
          y += s;
          d -= dx * 2;
        }
      }
    }
    else {
      // y-based
      if(y2 < y1) {
        swapInt(&x2, &x1);
        swapInt(&y2, &y1);
      }
      int s = (x2 > x1)? 1: -1;
      int d = 0;
      int x = x1;
      for(int y = y1; y <= y2; y++) {
        LEDplot(x, y, c);
        d += dx * 2;
        if(d >= dy) {
          x += s;
          d -= dy * 2;
        }
      }
    }
  }
}

void swapInt(int* xp, int* yp) {
  int t = *xp; *xp = *yp; *yp = t;
}

// Bresenham's circle algorithm
void LEDcircle(int x0, int y0, int r, int c) {
  int x = r;
  int y = 0;
  int d = -2 * r + 3;
  while(x >= y) {
    LEDplot(x0 + x, y0 + y, c);
    LEDplot(x0 - x, y0 + y, c);
    LEDplot(x0 + x, y0 - y, c);
    LEDplot(x0 - x, y0 - y, c);
    LEDplot(x0 + y, y0 + x, c);
    LEDplot(x0 - y, y0 + x, c);
    LEDplot(x0 + y, y0 - x, c);
    LEDplot(x0 - y, y0 - x, c);
    if(d >= 0) {
      x--;
      d -= 4 * x;
    }
    y++;
    d += 4 * y + 2;
  }    
}

void LEDfig1(int x, int y, int c, int n) {
  char ch = '0' + n;
  if(n >= 10) {
    ch = 'A' + n - 10;
    if(n >= 16) ch = '*';
  }
  LEDchar(x, y, c, ch);
}

void LEDdec2(int x, int y, int c, int n) {
  LEDfig1(x, y, c, n / 10);
  LEDfig1(x + 6, y, c, n % 10);
}

void LEDdec3(int x, int y, int c, int n) {
  LEDfig1(x,      y, c, (n / 100)     );
  LEDfig1(x +  6, y, c, (n /  10) % 10);
  LEDfig1(x + 12, y, c, (n      ) % 10);
}

void LEDhex2(int x, int y, int c, int n) {
  LEDfig1(x, y, c, n / 0x10);
  LEDfig1(x + 6, y, c, n % 0x10);
}

void LEDprint(int x, int y, int c, char s[]) {
  int xi = x;
  for(int i = 0; (i < 128) && (s[i] != '\0'); i++) {
    LEDchar(xi, y, c, s[i]);
    xi += 6;
  }
}

void LEDchar(int x, int y, int c, char ch) {
  static const uint8_t LEDfont[0x60][8] PROGMEM = {
    { 0x00, //  --------  0x20 space
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x21 !
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x50, //  -1-1----  0x22 "
      0x50, //  -1-1----
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x50, //  -1-1----  0x23 #
      0x50, //  -1-1----
      0xf8, //  11111---
      0x50, //  -1-1----
      0xf8, //  11111---
      0x50, //  -1-1----
      0x50, //  -1-1----
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x24 $
      0x78, //  -1111---
      0xa0, //  1-1-----
      0x70, //  -111----
      0x28, //  --1-1---
      0xf0, //  1111----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0xc0, //  11------  0x25 %
      0xc8, //  11--1---
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x98, //  1--11---
      0x18, //  ---11---
      0x00, //  --------
    },
    { 0x40, //  -1------  0x26 &
      0xa0, //  1-1-----
      0xa0, //  1-1-----
      0x40, //  -1------
      0xa8, //  1-1-1---
      0x90, //  1--1----
      0x68, //  -11-1---
      0x00, //  --------
    },
    { 0x30, //  --11----  0x27 '
      0x10, //  ---1----
      0x20, //  --1-----
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x10, //  ---1----  0x28 (
      0x20, //  --1-----
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x20, //  --1-----
      0x10, //  ---1----
      0x00, //  --------
    },
    { 0x40, //  -1------  0x29 )
      0x20, //  --1-----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x00, //  --------
    },
    { 0x00, //  --------  0x2a *
      0x20, //  --1-----
      0xa8, //  1-1-1---
      0x70, //  -111----
      0xa8, //  1-1-1---
      0x20, //  --1-----
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x2b +
      0x20, //  --1-----
      0x20, //  --1-----
      0xf8, //  11111---
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x2c ,
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x60, //  -11-----
      0x20, //  --1-----
      0x40, //  -1------
    },
    { 0x00, //  --------  0x2d -
      0x00, //  --------
      0x00, //  --------
      0xf8, //  11111---
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x2e .
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x60, //  -11-----
      0x60, //  -11-----
      0x00, //  --------
    },
    { 0x00, //  --------  0x2f /
      0x08, //  ----1---
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x80, //  1-------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x70, //  -111----  0x30 0
      0x88, //  1---1---
      0x98, //  1--11---
      0xa8, //  1-1-1---
      0xc8, //  11--1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x31 1
      0x60, //  -11-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x70, //  -111----  0x32 2
      0x88, //  1---1---
      0x08, //  ----1---
      0x30, //  --11----
      0x40, //  -1------
      0x80, //  1-------
      0xf8, //  11111---
      0x00, //  --------
    },
    { 0x70, //  -111----  0x33 3
      0x88, //  1---1---
      0x08, //  ----1---
      0x30, //  --11----
      0x08, //  ----1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x10, //  ---1----  0x34 4
      0x30, //  --11----
      0x50, //  -1-1----
      0x90, //  1--1----
      0xf8, //  11111---
      0x10, //  ---1----
      0x10, //  ---1----
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x35 5
      0x80, //  1-------
      0xf0, //  1111----
      0x08, //  ----1---
      0x08, //  ----1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x30, //  --11----  0x36 6
      0x40, //  -1------
      0x80, //  1-------
      0xf0, //  1111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x37 7
      0x08, //  ----1---
      0x08, //  ----1---
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x40, //  -1------
      0x00, //  --------
    },
    { 0x70, //  -111----  0x38 8
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x70, //  -111----  0x39 9
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x08, //  ----1---
      0x10, //  ---1----
      0x60, //  -11-----
      0x00, //  --------
    },
    { 0x00, //  --------  0x3a :
      0x30, //  --11----
      0x30, //  --11----
      0x00, //  --------
      0x30, //  --11----
      0x30, //  --11----
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x3b ;
      0x30, //  --11----
      0x30, //  --11----
      0x00, //  --------
      0x30, //  --11----
      0x10, //  ---1----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x08, //  ----1---  0x3c <
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x20, //  --1-----
      0x10, //  ---1----
      0x08, //  ----1---
      0x00, //  --------
    },
    { 0x00, //  --------  0x3d =
      0x00, //  --------
      0xf8, //  11111---
      0x00, //  --------
      0xf8, //  11111---
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x80, //  1-------  0x3e >
      0x40, //  -1------
      0x20, //  --1-----
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x80, //  1-------
      0x00, //  --------
    },
    { 0x70, //  -111----  0x3f ?
      0x88, //  1---1---
      0x08, //  ----1---
      0x10, //  ---1----
      0x20, //  --1-----
      0x00, //  --------
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x70, //  -111----  0x40 @
      0x88, //  1---1---
      0xb8, //  1-111---
      0xa8, //  1-1-1---
      0xb8, //  1-111---
      0x80, //  1-------
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x41 A
      0x50, //  -1-1----
      0x88, //  1---1---
      0x88, //  1---1---
      0xf8, //  11111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0xf0, //  1111----  0x42 B
      0x48, //  -1--1---
      0x48, //  -1--1---
      0x70, //  -111----
      0x48, //  -1--1---
      0x48, //  -1--1---
      0xf0, //  1111----
      0x00, //  --------
    },
    { 0x78, //  -1111---  0x43 C
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0xf0, //  1111----  0x44 D
      0x48, //  -1--1---
      0x48, //  -1--1---
      0x48, //  -1--1---
      0x48, //  -1--1---
      0x48, //  -1--1---
      0xf0, //  1111----
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x45 E
      0x80, //  1-------
      0x80, //  1-------
      0xf0, //  1111----
      0x80, //  1-------
      0x80, //  1-------
      0xf8, //  11111---
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x46 F
      0x80, //  1-------
      0x80, //  1-------
      0xf0, //  1111----
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x00, //  --------
    },
    { 0x78, //  -1111---  0x47 G
      0x80, //  1-------
      0x80, //  1-------
      0xb8, //  1-111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x48 H
      0x88, //  1---1---
      0x88, //  1---1---
      0xf8, //  11111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x70, //  -111----  0x49 I
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x38, //  --111---  0x4a J
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0xe0, //  111-----
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x4b K
      0x90, //  1--1----
      0xa0, //  1-1-----
      0xc0, //  11------
      0xa0, //  1-1-----
      0x90, //  1--1----
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x80, //  1-------  0x4c L
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0xf8, //  11111---
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x4d M
      0xd8, //  11-11---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x4e N
      0x88, //  1---1---
      0xc8, //  11--1---
      0xa8, //  1-1-1---
      0x98, //  1--11---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x70, //  -111----  0x4f O
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0xf0, //  1111----  0x50 P
      0x88, //  1---1---
      0x88, //  1---1---
      0xf0, //  1111----
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x00, //  --------
    },
    { 0x70, //  -111----  0x51 Q
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0xa8, //  1-1-1---
      0x90, //  1--1----
      0x68, //  -11-1---
      0x00, //  --------
    },
    { 0xf0, //  1111----  0x52 R
      0x88, //  1---1---
      0x88, //  1---1---
      0xf0, //  1111----
      0xa0, //  1-1-----
      0x90, //  1--1----
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x78, //  -1111---  0x53 S
      0x80, //  1-------
      0x80, //  1-------
      0x70, //  -111----
      0x08, //  ----1---
      0x08, //  ----1---
      0xf0, //  1111----
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x54 T
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x55 U
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x56 V
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x50, //  -1-1----
      0x50, //  -1-1----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x57 W
      0x88, //  1---1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0x50, //  -1-1----
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x58 X
      0x88, //  1---1---
      0x50, //  -1-1----
      0x20, //  --1-----
      0x50, //  -1-1----
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x88, //  1---1---  0x59 Y
      0x88, //  1---1---
      0x50, //  -1-1----
      0x50, //  -1-1----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0xf8, //  11111---  0x5a Z
      0x08, //  ----1---
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0x80, //  1-------
      0xf8, //  11111---
      0x00, //  --------
    },
    { 0x70, //  -111----  0x5b [
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x00, //  --------  0x5c back slash
      0x80, //  1-------
      0x40, //  -1------
      0x20, //  --1-----
      0x10, //  ---1----
      0x08, //  ----1---
      0x00, //  --------
      0x00, //  --------
    },
    { 0x70, //  -111----  0x5d ]
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x5e ^
      0x50, //  -1-1----
      0x88, //  1---1---
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x5f _
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0xf8, //  11111---
    },
    { 0x20, //  --1-----  0x60 `
      0x10, //  ---1----
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0x00, //  --------  0x61 a
      0x00, //  --------
      0x70, //  -111----
      0x08, //  ----1---
      0x78, //  -1111---
      0x88, //  1---1---
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x80, //  1-------  0x62 b
      0x80, //  1-------
      0xf0, //  1111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0xf0, //  1111----
      0x00, //  --------
    },
    { 0x00, //  --------  0x63 c
      0x00, //  --------
      0x78, //  -1111---
      0x80, //  1-------
      0x80, //  1-------
      0x80, //  1-------
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x08, //  ----1---  0x64 d
      0x08, //  ----1---
      0x78, //  -1111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x00, //  --------  0x65 e
      0x00, //  --------
      0x70, //  -111----
      0x88, //  1---1---
      0xf8, //  11111---
      0x80, //  1-------
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x38, //  --111---  0x66 f
      0x40, //  -1------
      0x40, //  -1------
      0xf8, //  11111---
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x00, //  --------
    },
    { 0x00, //  --------  0x67 g
      0x00, //  --------
      0x78, //  -1111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x08, //  ----1---
      0x70, //  -111----
    },
    { 0x80, //  1-------  0x68 h
      0x80, //  1-------
      0xf0, //  1111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x69 i
      0x00, //  --------
      0x60, //  -11-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x10, //  ---1----  0x6a j
      0x00, //  --------
      0x30, //  --11----
      0x10, //  ---1----
      0x10, //  ---1----
      0x10, //  ---1----
      0x20, //  --1-----
      0xc0, //  11------
    },
    { 0x80, //  1-------  0x6b k
      0x80, //  1-------
      0x88, //  1---1---
      0x90, //  1--1----
      0xe0, //  111-----
      0x90, //  1--1----
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x60, //  -11-----  0x6c l
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x00, //  --------  0x6d m
      0x00, //  --------
      0xd0, //  11-1----
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0x00, //  --------
    },
    { 0x00, //  --------  0x6e n
      0x00, //  --------
      0xf0, //  1111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x00, //  --------  0x6f o
      0x00, //  --------
      0x70, //  -111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x70, //  -111----
      0x00, //  --------
    },
    { 0x00, //  --------  0x70 p
      0x00, //  --------
      0xf0, //  1111----
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0xf0, //  1111----
      0x80, //  1-------
    },
    { 0x00, //  --------  0x71 q
      0x00, //  --------
      0x78, //  -1111---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x08, //  ----1---
    },
    { 0x00, //  --------  0x72 r
      0x00, //  --------
      0x98, //  1--11---
      0xa0, //  1-1-----
      0xc0, //  11------
      0x80, //  1-------
      0x80, //  1-------
      0x00, //  --------
    },
    { 0x00, //  --------  0x73 s
      0x00, //  --------
      0x78, //  -1111---
      0x80, //  1-------
      0x70, //  -111----
      0x08, //  ----1---
      0xf0, //  1111----
      0x00, //  --------
    },
    { 0x40, //  -1------  0x74 t
      0x40, //  -1------
      0xf8, //  11111---
      0x40, //  -1------
      0x40, //  -1------
      0x40, //  -1------
      0x38, //  --111---
      0x00, //  --------
    },
    { 0x00, //  --------  0x75 u
      0x00, //  --------
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x88, //  1---1---
      0x78, //  -1111---
      0x00, //  --------
    },
    { 0x00, //  --------  0x76 v
      0x00, //  --------
      0x88, //  1---1---
      0x88, //  1---1---
      0x50, //  -1-1----
      0x50, //  -1-1----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x00, //  --------  0x77 w
      0x00, //  --------
      0x88, //  1---1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0xa8, //  1-1-1---
      0x58, //  -1-11---
      0x00, //  --------
    },
    { 0x00, //  --------  0x78 x
      0x00, //  --------
      0x88, //  1---1---
      0x50, //  -1-1----
      0x20, //  --1-----
      0x50, //  -1-1----
      0x88, //  1---1---
      0x00, //  --------
    },
    { 0x00, //  --------  0x79 y
      0x00, //  --------
      0x88, //  1---1---
      0x88, //  1---1---
      0x50, //  -1-1----
      0x50, //  -1-1----
      0x20, //  --1-----
      0xc0, //  11------
    },
    { 0x00, //  --------  0x7a z
      0x00, //  --------
      0xf8, //  11111---
      0x10, //  ---1----
      0x20, //  --1-----
      0x40, //  -1------
      0xf8, //  11111---
      0x00, //  --------
    },
    { 0x30, //  --11----  0x7b {
      0x40, //  -1------
      0x40, //  -1------
      0x80, //  1-------
      0x40, //  -1------
      0x40, //  -1------
      0x30, //  --11----
      0x00, //  --------
    },
    { 0x20, //  --1-----  0x7c |
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x20, //  --1-----
      0x00, //  --------
    },
    { 0x60, //  -11-----  0x7d }
      0x10, //  ---1----
      0x10, //  ---1----
      0x08, //  ----1---
      0x10, //  ---1----
      0x10, //  ---1----
      0x60, //  -11-----
      0x00, //  --------
    },
    { 0x40, //  -1------  0x7e ~
      0xa8, //  1-1-1---
      0x10, //  ---1----
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
      0x00, //  --------
    },
    { 0xaa, //  1-1-1-1-  0x7f DEL
      0x55, //  -1-1-1-1
      0xaa, //  1-1-1-1-
      0x55, //  -1-1-1-1
      0xaa, //  1-1-1-1-
      0x55, //  -1-1-1-1
      0xaa, //  1-1-1-1-
      0x55, //  -1-1-1-1
    },
  };
  if(ch >= 0x20) ch -= 0x20; else ch = 0x5f;

  for(int j = 0; j < 8; j++) {
    int yj = y + j;
    if((yj >= 0) && (yj < 16)) {
      int i = (yj & 0x0f) << 1;
      uint16_t f = pgm_read_byte(&LEDfont[ch & 0x7f][j]) << 8;
      switch(c) {
        case 0:
          if((x >= -5) && (x <  0)) { Led[i    ] |=  (0xfc00 << (   - x));  Led[i    ] &= ~(f << (   - x)); }
          if((x >=  0) && (x < 16)) { Led[i    ] |=  (0xfc00 >> (x     ));  Led[i    ] &= ~(f >> (x     )); }
          if((x >= 11) && (x < 16)) { Led[i + 1] |=  (0xfc00 << (16 - x));  Led[i + 1] &= ~(f << (16 - x)); }
          if((x >= 16) && (x < 32)) { Led[i + 1] |=  (0xfc00 >> (x - 16));  Led[i + 1] &= ~(f >> (x - 16)); }
          break; 
        case 1:
          if((x >= -5) && (x <  0)) { Led[i    ] &= ~(0xfc00 << (   - x));  Led[i    ] |=  (f << (   - x)); }
          if((x >=  0) && (x < 16)) { Led[i    ] &= ~(0xfc00 >> (x     ));  Led[i    ] |=  (f >> (x     )); }
          if((x >= 11) && (x < 16)) { Led[i + 1] &= ~(0xfc00 << (16 - x));  Led[i + 1] |=  (f << (16 - x)); }
          if((x >= 16) && (x < 32)) { Led[i + 1] &= ~(0xfc00 >> (x - 16));  Led[i + 1] |=  (f >> (x - 16)); }
          break;
        case 2:
          if((x >= -5) && (x <  0)) {                                       Led[i    ] ^=  (f << (   - x)); }
          if((x >=  0) && (x < 16)) {                                       Led[i    ] ^=  (f >> (x     )); }
          if((x >= 11) && (x < 16)) {                                       Led[i + 1] ^=  (f << (16 - x)); }
          if((x >= 16) && (x < 32)) {                                       Led[i + 1] ^=  (f >> (x - 16)); }
          break;
        default: {}
      }
    }
  }    
}

// demonstration
void demoTest() {
  // Led address
  LEDclear();
  for(int i = 0; i < 32; i++) Led[i] = i;
  delay(1000);
  // Led bit
  for(int i = 0; i < 32; i += 2) Led[i] = 0x0001 << (i / 2);
  for(int i = 1; i < 32; i += 2) Led[i] = 0x8000 >> (i / 2);
  delay(1000);
  // lamp test
  for(int c = 0; c <= 2; c++) {
    for(int y = 0; y < 16; y++) {
      for(int x = 0; x < 32; x++) {
        LEDplot(x, y, c);
        delay(3);
      }
    }
  }
}

void demoRandom() {
  for(int j = 0; j < 5; j++) {
    LEDclear();
    for(int i = 0; i < 300; i++) LEDplot(random(32), random(16),1);
    delay(500);
  }
}

void demoBall() {
  struct ball_type {
    int x;   // position_x: 0..319 --> 0..31
    int y;   // posiiton_y: 0..159 --> 0..15
    int vx;  // velocity_x: 1..8
    int vy;  // velocity_y: 1..8
  };
  ball_type ball[10];  
  for(int i = 0; i < 10; i++) {
    ball[i].x  = random(320);
    ball[i].y  = random(160);
    ball[i].vx = random(1, 8);
    ball[i].vy = random(1, 8);
  }
  // move ball
  LEDclear();
  for(int t = 0; t < 1000; t++) {
    for(int i = 0; i < 10; i++) {
      int old_x = ball[i].x / 10;
      int old_y = ball[i].y / 10;
      // new x
      ball[i].x += ball[i].vx;
      if(ball[i].x < 0) {
        ball[i].x *= -1;
        ball[i].vx *= -1;
      }
      if(ball[i].x >= 320) {
        ball[i].x = 639 - ball[i].x;
        ball[i].vx *= -1;
      }
      // new y
      ball[i].y += ball[i].vy;
      if(ball[i].y < 0) {
        ball[i].y *= -1;
        ball[i].vy *= -1;
      }
      if(ball[i].y >= 160) {
        ball[i].y = 319 - ball[i].y;
        ball[i].vy *= -1;
      }
      // update LED
      int new_x = ball[i].x / 10;
      int new_y = ball[i].y / 10;
      if((new_x != old_x) || (new_y != old_y)) {
        LEDplot(old_x, old_y, 0);
        LEDplot(new_x, new_y, 1);
      }
    }
    if(     t <   50) delay(100);
    else if(t <  100) delay( 50);
    else if(t <  500) delay( 20);
    else              delay(  5);
  }
}

void demoLine1() {
  for(int j = 0; j < 4; j++) {
    for(int i = 0; i < 48; i++) {
      LEDclear();
      switch(j) {
        case 0: if(i < 32) LEDline( 0,  0,      i,     15, 1); else LEDline( 0,  0,     31, 47 - i, 1); break;
        case 1: if(i < 16) LEDline(31,  0,      0,      i, 1); else LEDline(31,  0, i - 16,     15, 1); break;
        case 2: if(i < 32) LEDline(31, 15, 31 - i,      0, 1); else LEDline(31, 15,      0, i - 32, 1); break;
        case 3: if(i < 16) LEDline( 0, 15,     31, 15 - i, 1); else LEDline( 0, 15, 47 - i,      0, 1); break;
        default: {}
      }
      delay(25);
    }  
  }
  for(int i = 0; i < 48; i++) {
    LEDline(i,     0, 0, i,     1);
    LEDline(i - 1, 0, 0, i - 1, 0); 
    delay(25);  
  }
}
  
void demoLine2() {
  for(int i = 0; i < 110; i++) {
    if(i < 100) LEDclear();
    LEDline(random(32), random(16), random(32), random(16), 1);
    delay(50);  
  }
}

void demoCircle1() {
  for(int r = 0; r < 40; r++) {
    LEDclear();
    int y = 7;
    if(r >= 8)  y = 15 - r;
    LEDcircle(0, y, r, 1);
    delay(100);
  }
}

void demoCircle2() {
  for(int i = 0; i < 20; i++) {
    LEDclear();
    LEDcircle(random(32), random(16), random(8), 1);
    delay(250);
  }
}

void demoCircle3() {
  for(int i = 0; i < 10; i++) {
    int x = random(32);
    int y = random(16);
    LEDclear();
    for(int r = random(5); r < 32; r += 3) {
      LEDcircle(x, y, r, 1);
      delay(50);
    }
  }
}

void demoPrint2(char s1[], char s2[], int c1, int c2, int d) {
  LEDclear();
  // length of strings
  int l1; for(l1 = 0; s1[l1] != '\0'; l1++) {}
  int l2; for(l2 = 0; s2[l2] != '\0'; l2++) {}
  // long and short length
  int ll = (l1 > l2)? l1: l2;
  int ls = (l1 > l2)? l2: l1;
  // rate of display
  int r1 = ll * 10 / l1;
  int r2 = ll * 10 / l2;
  // display go
  for(int i = 32 * ll / ls; i > - ll * 6; i--) {
    LEDprint(i * 10 / r1, 0, c1, s1);
    LEDprint(i * 10 / r2, 8, c2, s2);
    delay(d);
  }
}

void demoTimer() {
  LEDclear();
  for(int i = 0; i < 1000; i++) {
    long u = millis();
    int t = (u) % 1000;
    int s = (u / 1000) % 60;
    int m = (u / 1000 / 60) % 60;
    int h = (u / 1000 / 60 / 60) % 24;
    int d = (u / 1000 / 60 / 60 / 24);
    LEDdec2( 1, 0, 1, h);
    if(s % 2 == 0) LEDchar(12, 0, 1, ':');
    else           LEDchar(12, 0, 1, ' ');
    LEDdec2(18, 0, 1, m);
    LEDdec2( 1, 8, 1, s);
    LEDdec3(14, 8, 1, t);
    delay(10);
  }
  delay(1000);
  LEDclear();
  for(int i = 0; i < 1000; i++) {
    long u = millis();
    int h1 = (u            ) % 0x100;
    int h2 = (u / 0x100    ) % 0x100;
    int h3 = (u / 0x10000  ) % 0x100;
    int h4 = (u / 0x1000000) % 0x100;
    LEDhex2( 0, 0, 1, h4);
    LEDhex2(14, 0, 1, h3);
    LEDhex2( 4, 8, 1, h2);
    LEDhex2(18, 8, 1, h1);
    delay(10);
  }
}
